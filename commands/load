#!/usr/bin/env bash
# shellcheck disable=SC2034 shell=bash

set -eo pipefail
IFS=$'\n\t'

[[ "${DEBUG:-}" == 'true' ]] && set -x

# shellcheck disable=SC1090
. "$(dirname "${0}")/common.sh"

# This should be at the top but common.sh throws an error when used
set -u

# Options:
# compression gzip|lz4|bz2|zip|none
# dateformat %Y%m%d%H%M%S
# checksum sha256
# umask 0077
# dest gs://|s3://|file://
# databases ALL

echo "> Starting $(basename $0)"

parse_options() {

    # For reference these are the relevant parameters that mongodump command accepts
    #   -h, --host=name         mongodb host to connect to (setname/host1,host2 for replica sets)
    #   -p, --password[=name]   password for authentication
    #   --port=#                server port (can also use --host hostname:port)
    #   -u, --username=name     username for authentication
    #   -d, --db=name           database to use
    #   --ssl                   connect to a mongod or mongos that has ssl enabled

    # We don't want to pass these back to the caller
    local password_file
    local password

    # Pull in environment variables prefixed with DATABASE_
    for item in host port username database password password_file; do
        local varname
        varname="DATABASE_${item^^}"
        if [[ -n "${!varname:-}" ]]; then
          eval ${item}="${!varname}"
        fi
    done

    # Options and long options
    local options="h:P:u:p:"
    local longopts="host:,port:,username:,password:,password_file:,authenticationDatabase:,compression:,ssl,umask:"
    local parsed

    # Parse with getopt (not getopts)
    ! parsed=$(getopt --quiet --options=${options} --longoptions=${longopts} --name "${0}" -- "${@}")
    eval set -- "${parsed}"
    while true; do
      case "${1}" in
        -h|--host)
          host="${2}"
          shift 2
          ;;
        -P|--port)
          port="${2}"
          shift 2
          ;;
        -u|--username)
          username="${2}"
          shift 2
          ;;
        -p|--password)
          password="${2}"
          shift 2
          ;;
        --password-file)
          password_file="${2}"
          shift 2
          ;;
        --authenticationDatabase)
          authenticationDatabase="${2}"
          shift 2
          ;;
        --compression)
          compression="${2}"
          shift 2
          ;;
        --ssl)
          ssl="true"
          shift 1
          ;;
        --umask)
          umask="${2}"
          shift 2
          ;;
        --)
          shift
          break
          ;;
        *)
          echo "Unrecognised option"
          exit 3
          ;;
      esac
    done

    # Set remaining command line arguments into an array
    args=( "${@}" )

    # Read in the password file if set
    if [[ -n "${password_file:-}" ]]; then
        # Read password file if set on the command line or DATABASE_PASSWORD_FILE
        password="$(cat "${password_file}")"
    fi

    # Setup connection string
    connection=()
    for item in host port username password authenticationDatabase ; do
        if [[ -n "${!item:-}" ]]; then
          connection+=("--${item//_/-}=${!item}")
        fi
    done

    for item in ssl ; do
        if [[ "${!item:-}" == "true" ]]; then
          connection+=("--${item//_/-}")
        fi
    done
}

parse_options "${@}"

usage() {
    echoerr "Usage: ${0} [GLOBAL_OPTIONS] [OPTIONS] [DATABASE...] DESTINATION"
    echoerr "Global Options: (where possible these options match mongodump options)"
    echoerr "    -h|--host    host to connect to"
    echoerr "    -P|--port    post to connect to"
    echoerr "    -u|--username    user to connect with"
    echoerr "    -p|--password    password to connection with"
    echoerr "    --authenticationDatabase  authentication database to use eg admin"
    echoerr "    --ssl            connect using ssl"
    echoerr ""
    echoerr "Options:"
    echoerr "    --compression    gzip|lz4|bz2|none"
    echoerr "    --umask    0077"
    echoerr ""
    echoerr "    DATABASE    database(s) to dump. Will dump all if no databases are specified."
    echoerr "    DESTINATION    Destination to save database dumps to. s3://, gs:// and files are supported."
    echoerr ""
    echoerr "Environment variables:"
    echoerr "    Any global options can be prefixed with DATABASE_ and specified via environment variable."
    echoerr "    Any save command options can be prefixed with SAVE_ and specified via environment variable."
}

case "${#args[@]}" in
  0|1)
    echo "error: Insufficient args: ${#args[@]} args passed"
    exit 1
    ;;
  2)
    source="${args[0]}"
    src_database="${args[1]}"
    dest_database="${args[1]}"
    ;;
  3)
    source="${args[0]}"
    src_database="${args[1]}"
    dest_database="${args[2]}"
    ;;
  *)
    echo "Unrecognised args ${args[@]}"
    exit 1
    ;;
  esac

echo "Source:  ${source}"
echo "SRC DB:  ${src_database}"
echo "DEST DB: ${dest_database}"

# Set the umask, umask defaults to 0077 to keep files private during db dumping
umask "${umask:-0077}"

date="$(date --utc "+${date_format:-%Y%m%d%H%M%S}")"

get_storage_commands "${source}"

# Find latest
latest="$(eval "${ls_cmd[@]}" "${source}" | sed -E -e '/[0-9]{14}/!d' -e 's/.*([0-9]{14})\/$/\1/' | sort | tail -n1)"
echo "Latest: ${latest}"

eval "${ls_cmd[@]}" "${source}/${latest}/"

## up to here!!
file="$(eval "${ls_cmd[@]}" "${source}/${latest}/" | sed -E -e 's/.*[\/ ]([^\/]*)$/\1/' | grep "^${src_database}[\.\-]" || true)"
if [[ -z "${file}" ]]; then
  echo "No save found for database in ${latest}"
  exit 1
fi
echo "File: ${file}"

if [[ "${compression:-auto}" == "auto" ]]; then
  case "${file##*.}" in
    "lz4")
      compression="lz4"
      ;;
    "gz")
      compression="gzip"
      ;;
    "bz2")
      compression="bz2"
      ;;
    "zip")
      compression="zip"
      ;;
    "sql"|"dump"|"pgdump"|"pg_dump")
      compression="none"
      ;;
    *)
      echo "Unknown file expression, please define compression used or compression=none"
      exit 1
      ;;
    esac
fi

# Output compression
get_compression_commands "${compression}"

wait_mongodb "${host}" "${port:-27017}"

eval "${fetch_cmd[@]}" "${source}/${latest}/${file}" "-" | "${decompression_cmd[@]}" | mongorestore "${connection[@]}" "--archive=-" --nsFrom="${src_database}.*" --nsTo="${dest_database}.*"

echo "> Finished."
